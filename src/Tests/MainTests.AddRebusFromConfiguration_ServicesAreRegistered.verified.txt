[
  {
    ServiceType: IPostConfigureOptions<BusOptions>,
    ImplementationType: ConfigureFileSystemTransportConfigProviderOptions
  },
  {
    ServiceType: Func<string, InMemNetwork>,
    ImplementationInstance: {
      Type: Func<string, InMemNetwork>,
      Target: MainTests.<>c,
      Method: Rebus.Transport.InMem.InMemNetwork AddRebusFromConfiguration_ServicesAreRegistered(System.String)
    }
  },
  {
    ServiceType: IPostConfigureOptions<BusOptions>,
    ImplementationType: ConfigureInMemoryTransportConfigProviderOptions
  },
  {
    ServiceType: IPostConfigureOptions<BusOptions>,
    ImplementationType: ConfigureServiceBusTransportConfigProviderOptions
  },
  {
    ServiceType: IPostConfigureOptions<BusOptions>,
    ImplementationType: ConfigureSqlServerOutboxConfigProviderOptions
  },
  {
    ServiceType: IOptions<TOptions>,
    ImplementationType: UnnamedOptionsManager<TOptions>
  },
  {
    Lifetime: Scoped,
    ServiceType: IOptionsSnapshot<TOptions>,
    ImplementationType: OptionsManager<TOptions>
  },
  {
    ServiceType: IOptionsMonitor<TOptions>,
    ImplementationType: OptionsMonitor<TOptions>
  },
  {
    Lifetime: Transient,
    ServiceType: IOptionsFactory<TOptions>,
    ImplementationType: OptionsFactory<TOptions>
  },
  {
    ServiceType: IOptionsMonitorCache<TOptions>,
    ImplementationType: OptionsCache<TOptions>
  },
  {
    ServiceType: IOptionsChangeTokenSource<RebusOptions>,
    ImplementationInstance: {
      Name: 
    }
  },
  {
    ServiceType: IConfigureOptions<RebusOptions>,
    ImplementationInstance: {
      Name: ,
      Action: {
        Type: Action<RebusOptions>,
        Target: NamedConfigureFromConfigurationOptions<RebusOptions>.<>c__DisplayClass1_0,
        Method: Void .ctor(Rebus.Extensions.Configuration.RebusOptions)
      }
    }
  },
  {
    ServiceType: Func<string, InMemNetwork>,
    ImplementationFactory: {
      Type: Func<IServiceProvider, Func<string, InMemNetwork>>,
      Target: RebusRegistrationBuilder.<>c,
      Method: System.Func`2[System.String,Rebus.Transport.InMem.InMemNetwork] AddRebus(System.IServiceProvider)
    }
  },
  {
    ServiceType: Func<string, InMemDataStore>,
    ImplementationFactory: {
      Type: Func<IServiceProvider, Func<string, InMemDataStore>>,
      Target: RebusRegistrationBuilder.<>c,
      Method: System.Func`2[System.String,Rebus.DataBus.InMem.InMemDataStore] AddRebus(System.IServiceProvider)
    }
  },
  {
    ServiceType: IOptionsChangeTokenSource<BusOptions>,
    ImplementationInstance: {
      Name: Default
    }
  },
  {
    ServiceType: IConfigureOptions<BusOptions>,
    ImplementationInstance: {
      Name: Default,
      Action: {
        Type: Action<BusOptions>,
        Target: NamedConfigureFromConfigurationOptions<BusOptions>.<>c__DisplayClass1_0,
        Method: Void .ctor(Rebus.Extensions.Configuration.BusOptions)
      }
    }
  },
  {
    ServiceType: IOptionsChangeTokenSource<FileSystemRebusTransportOptions>,
    ImplementationInstance: {
      Name: Default
    }
  },
  {
    ServiceType: IConfigureOptions<FileSystemRebusTransportOptions>,
    ImplementationInstance: {
      Name: Default,
      Action: {
        Type: Action<FileSystemRebusTransportOptions>,
        Target: NamedConfigureFromConfigurationOptions<FileSystemRebusTransportOptions>.<>c__DisplayClass1_0,
        Method: Void .ctor(Rebus.Extensions.Configuration.FileSystem.FileSystemRebusTransportOptions)
      }
    }
  },
  {
    ServiceType: IValidateOptions<FileSystemRebusTransportOptions>,
    ImplementationInstance: {
      Name: Default
    }
  },
  {
    ServiceType: IHostedService,
    ImplementationType: ValidationHostedService
  },
  {
    Lifetime: Transient,
    ServiceType: IConfigureOptions<ValidatorOptions>,
    ImplementationFactory: {
      Type: Func<IServiceProvider, IConfigureOptions<ValidatorOptions>>,
      Target: OptionsBuilder<ValidatorOptions>.<>c__DisplayClass9_0<IOptionsMonitor<FileSystemRebusTransportOptions>>,
      Method: Microsoft.Extensions.Options.IConfigureOptions`1[Microsoft.Extensions.DependencyInjection.ValidatorOptions] Configure(System.IServiceProvider)
    }
  },
  {
    ServiceType: RebusDisposalHelper,
    ImplementationType: RebusDisposalHelper
  },
  {
    ServiceType: RebusInitializer,
    ImplementationFactory: {
      Type: Func<IServiceProvider, RebusInitializer>,
      Target: ServiceCollectionExtensions.<>c__DisplayClass1_0,
      Method: Rebus.ServiceProvider.Internals.RebusInitializer AddRebus(System.IServiceProvider)
    }
  },
  {
    ServiceType: DefaultBusInstance,
    ImplementationFactory: {
      Type: Func<IServiceProvider, DefaultBusInstance>,
      Target: ServiceCollectionExtensions.<>c,
      Method: Rebus.ServiceProvider.Internals.DefaultBusInstance AddRebus(System.IServiceProvider)
    }
  },
  {
    ServiceType: IHostedService,
    ImplementationFactory: {
      Type: Func<IServiceProvider, IHostedService>,
      Target: ServiceCollectionExtensions.<>c,
      Method: Microsoft.Extensions.Hosting.IHostedService AddRebus(System.IServiceProvider)
    }
  },
  {
    ServiceType: RebusResolver,
    ImplementationInstance: {}
  },
  {
    ServiceType: ServiceProviderBusRegistry,
    ImplementationInstance: {}
  },
  {
    ServiceType: IBusRegistry,
    ImplementationFactory: {
      Type: Func<IServiceProvider, IBusRegistry>,
      Target: ServiceCollectionExtensions.<>c,
      Method: Rebus.ServiceProvider.IBusRegistry AddRebus(System.IServiceProvider)
    }
  },
  {
    Lifetime: Transient,
    ServiceType: IBus,
    ImplementationFactory: {
      Type: Func<IServiceProvider, IBus>,
      Target: ServiceCollectionExtensions.<>c,
      Method: Rebus.Bus.IBus AddRebus(System.IServiceProvider)
    }
  },
  {
    Lifetime: Transient,
    ServiceType: ISyncBus,
    ImplementationFactory: {
      Type: Func<IServiceProvider, ISyncBus>,
      Target: ServiceCollectionExtensions.<>c,
      Method: Rebus.Bus.Advanced.ISyncBus AddRebus(System.IServiceProvider)
    }
  },
  {
    Lifetime: Transient,
    ServiceType: IDataBus,
    ImplementationFactory: {
      Type: Func<IServiceProvider, IDataBus>,
      Target: ServiceCollectionExtensions.<>c,
      Method: Rebus.DataBus.IDataBus AddRebus(System.IServiceProvider)
    }
  },
  {
    Lifetime: Transient,
    ServiceType: IMessageContext,
    ImplementationFactory: {
      Type: Func<IServiceProvider, IMessageContext>,
      Target: ServiceCollectionExtensions.<>c,
      Method: Rebus.Pipeline.IMessageContext AddRebus(System.IServiceProvider)
    }
  },
  {
    Lifetime: Transient,
    ServiceType: BusLifetimeEvents,
    ImplementationFactory: {
      Type: Func<IServiceProvider, BusLifetimeEvents>,
      Target: ServiceCollectionExtensions.<>c,
      Method: Rebus.Bus.BusLifetimeEvents AddRebus(System.IServiceProvider)
    }
  }
]